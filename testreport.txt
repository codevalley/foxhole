============================= test session starts =============================
platform win32 -- Python 3.12.5, pytest-7.4.0, pluggy-1.5.0 -- c:\Users\narayan\Develop\foxhole\.venv\Scripts\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\narayan\Develop\foxhole
configfile: pytest.ini
plugins: anyio-3.7.1, asyncio-0.21.1
asyncio: mode=Mode.AUTO
collecting ... collected 33 items

tests/test_auth.py::test_register_user ERROR                             [  3%]
tests/test_auth.py::test_login ERROR                                     [  6%]
tests/test_auth.py::test_get_current_user ERROR                          [  9%]
tests/test_auth.py::test_update_user_profile ERROR                       [ 12%]
tests/test_auth.py::test_invalid_token ERROR                             [ 15%]
tests/test_auth.py::test_missing_token ERROR                             [ 18%]
tests/test_auth.py::test_create_access_token PASSED                      [ 21%]
tests/test_auth.py::test_login_for_access_token_invalid_user ERROR       [ 24%]
tests/test_auth.py::test_get_current_user_invalid_token ERROR            [ 27%]
tests/test_auth.py::test_update_user_profile_no_changes ERROR            [ 30%]
tests/test_dependencies.py::test_minio_storage_service_upload_file_error PASSED [ 33%]
tests/test_dependencies.py::test_minio_storage_service_get_file_url_error PASSED [ 36%]
tests/test_dependencies.py::test_minio_storage_service_list_files_error PASSED [ 39%]
tests/test_dependencies.py::test_get_storage_service_mock PASSED         [ 42%]
tests/test_dependencies.py::test_get_storage_service_minio PASSED        [ 45%]
tests/test_files.py::test_upload_file ERROR                              [ 48%]
tests/test_files.py::test_get_file_url ERROR                             [ 51%]
tests/test_files.py::test_get_file_url_not_found ERROR                   [ 54%]
tests/test_files.py::test_list_files ERROR                               [ 57%]
tests/test_health.py::test_health_check ERROR                            [ 60%]
tests/test_main.py::test_register_user ERROR                             [ 63%]
tests/test_main.py::test_login ERROR                                     [ 66%]
tests/test_main.py::test_get_user_profile ERROR                          [ 69%]
tests/test_main.py::test_update_user_profile ERROR                       [ 72%]
tests/test_main.py::test_health_check ERROR                              [ 75%]
tests/test_websocket.py::test_websocket_connection PASSED                [ 78%]
tests/test_websocket.py::test_websocket_multiple_messages PASSED         [ 81%]
tests/test_websocket.py::test_websocket_broadcast SKIPPED (Broadcast...) [ 84%]
tests/test_websocket.py::test_websocket_endpoint_uninitialized_manager PASSED [ 87%]
tests/test_websocket.py::test_websocket_endpoint_sqlalchemy_error PASSED [ 90%]
tests/test_websocket.py::test_websocket_disconnect PASSED                [ 93%]
tests/test_websocket.py::test_websocket_unauthorized PASSED              [ 96%]
tests/test_websocket.py::test_websocket_invalid_token PASSED             [100%]

=================================== ERRORS ====================================
____________________ ERROR at setup of test_register_user _____________________
file C:\Users\narayan\Develop\foxhole\tests\test_auth.py, line 14
  async def test_register_user(
      async_client: AsyncClient, db_session: AsyncSession
  ) -> None:
      response = await async_client.post(
          "/auth/register", json={"screen_name": "testuser"}
      )
      assert response.status_code == 200
      data = response.json()
      assert "id" in data
      assert data["screen_name"] == "testuser"

      # Verify user was created in the database
      user = await db_session.get(User, data["id"])
      assert user is not None
      assert user.screen_name == "testuser"
E       fixture 'async_client' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, authenticated_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, client, configure_logging, db_session, doctest_namespace, engine, event_loop, mock_storage_service, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, test_client, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, websocket_manager
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\narayan\Develop\foxhole\tests\test_auth.py:14
---------------------------- Captured stdout setup ----------------------------
2024-09-09 15:16:00,314 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2024-09-09 15:16:00,315 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2024-09-09 15:16:00,315 INFO sqlalchemy.engine.Engine [raw sql] ()
2024-09-09 15:16:00,316 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2024-09-09 15:16:00,316 INFO sqlalchemy.engine.Engine [raw sql] ()
2024-09-09 15:16:00,317 INFO sqlalchemy.engine.Engine
CREATE TABLE users (
	id VARCHAR NOT NULL,
	screen_name VARCHAR,
	PRIMARY KEY (id)
)


2024-09-09 15:16:00,317 INFO sqlalchemy.engine.Engine [no key 0.00012s] ()
2024-09-09 15:16:00,317 INFO sqlalchemy.engine.Engine CREATE INDEX ix_users_screen_name ON users (screen_name)
2024-09-09 15:16:00,318 INFO sqlalchemy.engine.Engine [no key 0.00051s] ()
2024-09-09 15:16:00,318 INFO sqlalchemy.engine.Engine CREATE INDEX ix_users_id ON users (id)
2024-09-09 15:16:00,318 INFO sqlalchemy.engine.Engine [no key 0.00010s] ()
2024-09-09 15:16:00,319 INFO sqlalchemy.engine.Engine COMMIT
----------------------------- Captured log setup ------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2685 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1844 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1844 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1844 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1844 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1844
CREATE TABLE users (
	id VARCHAR NOT NULL,
	screen_name VARCHAR,
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1844 [no key 0.00012s] ()
INFO     sqlalchemy.engine.Engine:base.py:1844 CREATE INDEX ix_users_screen_name ON users (screen_name)
INFO     sqlalchemy.engine.Engine:base.py:1844 [no key 0.00051s] ()
INFO     sqlalchemy.engine.Engine:base.py:1844 CREATE INDEX ix_users_id ON users (id)
INFO     sqlalchemy.engine.Engine:base.py:1844 [no key 0.00010s] ()
INFO     sqlalchemy.engine.Engine:base.py:2691 COMMIT
________________________ ERROR at setup of test_login _________________________
file C:\Users\narayan\Develop\foxhole\tests\test_auth.py, line 31
  async def test_login(async_client: AsyncClient, db_session: AsyncSession) -> None:
      # First, register a user
      register_response = await async_client.post(
          "/auth/register", json={"screen_name": "loginuser"}
      )
      user_id = register_response.json()["id"]

      # Now, try to login
      login_response = await async_client.post("/auth/token", data={"user_id": user_id})
      assert login_response.status_code == 200
      data = login_response.json()
      assert "access_token" in data
      assert data["token_type"] == "bearer"
E       fixture 'async_client' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, authenticated_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, client, configure_logging, db_session, doctest_namespace, engine, event_loop, mock_storage_service, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, test_client, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, websocket_manager
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\narayan\Develop\foxhole\tests\test_auth.py:31
___________________ ERROR at setup of test_get_current_user ___________________
file C:\Users\narayan\Develop\foxhole\tests\test_auth.py, line 46
  async def test_get_current_user(
      async_client: AsyncClient, db_session: AsyncSession
  ) -> None:
      # Register and login a user
      register_response = await async_client.post(
          "/auth/register", json={"screen_name": "currentuser"}
      )
      user_id = register_response.json()["id"]
      login_response = await async_client.post("/auth/token", data={"user_id": user_id})
      access_token = login_response.json()["access_token"]

      # Get current user
      response = await async_client.get(
          "/auth/users/me", headers={"Authorization": f"Bearer {access_token}"}
      )
      assert response.status_code == 200
      data = response.json()
      assert data["id"] == user_id
      assert data["screen_name"] == "currentuser"
E       fixture 'async_client' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, authenticated_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, client, configure_logging, db_session, doctest_namespace, engine, event_loop, mock_storage_service, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, test_client, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, websocket_manager
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\narayan\Develop\foxhole\tests\test_auth.py:46
_________________ ERROR at setup of test_update_user_profile __________________
file C:\Users\narayan\Develop\foxhole\tests\test_auth.py, line 67
  async def test_update_user_profile(
      async_client: AsyncClient, db_session: AsyncSession
  ) -> None:
      # Register and login a user
      register_response = await async_client.post(
          "/auth/register", json={"screen_name": "updateuser"}
      )
      user_id = register_response.json()["id"]
      login_response = await async_client.post("/auth/token", data={"user_id": user_id})
      access_token = login_response.json()["access_token"]

      # Update user profile
      update_response = await async_client.put(
          "/auth/users/me",
          headers={"Authorization": f"Bearer {access_token}"},
          json={"screen_name": "updateduser"},
      )
      assert update_response.status_code == 200
      data = update_response.json()
      assert data["id"] == user_id
      assert data["screen_name"] == "updateduser"

      # Verify update in the database
      user = await db_session.get(User, user_id)
      assert user is not None
      assert user.screen_name == "updateduser"
E       fixture 'async_client' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, authenticated_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, client, configure_logging, db_session, doctest_namespace, engine, event_loop, mock_storage_service, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, test_client, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, websocket_manager
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\narayan\Develop\foxhole\tests\test_auth.py:67
____________________ ERROR at setup of test_invalid_token _____________________
file C:\Users\narayan\Develop\foxhole\tests\test_auth.py, line 95
  async def test_invalid_token(async_client: AsyncClient) -> None:
      response = await async_client.get(
          "/auth/users/me", headers={"Authorization": "Bearer invalid_token"}
      )
      assert response.status_code == 401
      assert response.json()["detail"] == "Could not validate credentials"
E       fixture 'async_client' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, authenticated_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, client, configure_logging, db_session, doctest_namespace, engine, event_loop, mock_storage_service, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, test_client, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, websocket_manager
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\narayan\Develop\foxhole\tests\test_auth.py:95
____________________ ERROR at setup of test_missing_token _____________________
file C:\Users\narayan\Develop\foxhole\tests\test_auth.py, line 103
  async def test_missing_token(async_client: AsyncClient) -> None:
      response = await async_client.get("/auth/users/me")
      assert response.status_code == 401
      assert response.json()["detail"] == "Not authenticated"
E       fixture 'async_client' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, authenticated_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, client, configure_logging, db_session, doctest_namespace, engine, event_loop, mock_storage_service, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, test_client, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, websocket_manager
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\narayan\Develop\foxhole\tests\test_auth.py:103
_________ ERROR at setup of test_login_for_access_token_invalid_user __________
file C:\Users\narayan\Develop\foxhole\tests\test_auth.py, line 116
  async def test_login_for_access_token_invalid_user(async_client: AsyncClient) -> None:
      response = await async_client.post(
          "/auth/token", data={"user_id": "non_existent_user"}
      )
      assert response.status_code == 401
      assert response.json()["detail"] == "Invalid user ID"
E       fixture 'async_client' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, authenticated_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, client, configure_logging, db_session, doctest_namespace, engine, event_loop, mock_storage_service, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, test_client, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, websocket_manager
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\narayan\Develop\foxhole\tests\test_auth.py:116
____________ ERROR at setup of test_get_current_user_invalid_token ____________
file C:\Users\narayan\Develop\foxhole\tests\test_auth.py, line 124
  async def test_get_current_user_invalid_token(async_client: AsyncClient) -> None:
      response = await async_client.get(
          "/auth/users/me", headers={"Authorization": "Bearer invalid_token"}
      )
      assert response.status_code == 401
      assert response.json()["detail"] == "Could not validate credentials"
E       fixture 'async_client' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, authenticated_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, client, configure_logging, db_session, doctest_namespace, engine, event_loop, mock_storage_service, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, test_client, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, websocket_manager
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\narayan\Develop\foxhole\tests\test_auth.py:124
____________ ERROR at setup of test_update_user_profile_no_changes ____________
file C:\Users\narayan\Develop\foxhole\tests\test_auth.py, line 133
  async def test_update_user_profile_no_changes(
      async_client: AsyncClient, db_session: AsyncSession
  ) -> None:
      # Register and login a user
      register_response = await async_client.post(
          "/auth/register", json={"screen_name": "no_change_user"}
      )
      user_id = register_response.json()["id"]
      login_response = await async_client.post("/auth/token", data={"user_id": user_id})
      access_token = login_response.json()["access_token"]

      # Update user profile with no changes
      update_response = await async_client.put(
          "/auth/users/me",
          headers={"Authorization": f"Bearer {access_token}"},
          json={},
      )
      assert update_response.status_code == 200
      data = update_response.json()
      assert data["id"] == user_id
      assert data["screen_name"] == "no_change_user"
E       fixture 'async_client' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, authenticated_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, client, configure_logging, db_session, doctest_namespace, engine, event_loop, mock_storage_service, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, test_client, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, websocket_manager
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\narayan\Develop\foxhole\tests\test_auth.py:133
_____________________ ERROR at setup of test_upload_file ______________________
file C:\Users\narayan\Develop\foxhole\tests\test_files.py, line 12
  async def test_upload_file(
      async_client: AsyncClient, mock_storage_service: StorageService
  ) -> None:
      response = await async_client.post(
          "/files/upload", files={"file": ("test.txt", b"test content")}
      )
      assert response.status_code == 200
      assert response.json() == {
          "message": "File uploaded successfully",
          "object_name": "test.txt",
      }
E       fixture 'async_client' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, authenticated_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, client, configure_logging, db_session, doctest_namespace, engine, event_loop, mock_storage_service, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, test_client, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, websocket_manager
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\narayan\Develop\foxhole\tests\test_files.py:12
_____________________ ERROR at setup of test_get_file_url _____________________
file C:\Users\narayan\Develop\foxhole\tests\test_files.py, line 25
  async def test_get_file_url(
      async_client: AsyncClient, mock_storage_service: StorageService
  ) -> None:
      response = await async_client.get("/files/file/test_object")
      assert response.status_code == 200
      assert response.json() == {"url": "http://mock-url.com/default-bucket/test_object"}
E       fixture 'async_client' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, authenticated_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, client, configure_logging, db_session, doctest_namespace, engine, event_loop, mock_storage_service, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, test_client, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, websocket_manager
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\narayan\Develop\foxhole\tests\test_files.py:25
________________ ERROR at setup of test_get_file_url_not_found ________________
file C:\Users\narayan\Develop\foxhole\tests\test_files.py, line 33
  async def test_get_file_url_not_found(
      async_client: AsyncClient, mock_storage_service: StorageService
  ) -> None:
      response = await async_client.get("/files/file/non_existent_object")
      assert response.status_code == 404
      assert response.json()["detail"] == "File not found"
E       fixture 'async_client' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, authenticated_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, client, configure_logging, db_session, doctest_namespace, engine, event_loop, mock_storage_service, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, test_client, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, websocket_manager
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\narayan\Develop\foxhole\tests\test_files.py:33
______________________ ERROR at setup of test_list_files ______________________
file C:\Users\narayan\Develop\foxhole\tests\test_files.py, line 41
  async def test_list_files(
      async_client: AsyncClient, mock_storage_service: StorageService
  ) -> None:
      response = await async_client.get("/files/")
      assert response.status_code == 200
      assert response.json() == {"files": ["file1.txt", "file2.txt"]}
E       fixture 'async_client' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, authenticated_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, client, configure_logging, db_session, doctest_namespace, engine, event_loop, mock_storage_service, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, test_client, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, websocket_manager
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\narayan\Develop\foxhole\tests\test_files.py:41
_____________________ ERROR at setup of test_health_check _____________________
file C:\Users\narayan\Develop\foxhole\tests\test_health.py, line 8
  @pytest.mark.asyncio
  async def test_health_check(async_client: AsyncClient) -> None:
      response = await async_client.get("/health")
      assert response.status_code == 200
      assert response.json() == {"status": "ok"}
E       fixture 'async_client' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, authenticated_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, client, configure_logging, db_session, doctest_namespace, engine, event_loop, mock_storage_service, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, test_client, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, websocket_manager
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\narayan\Develop\foxhole\tests\test_health.py:8
____________________ ERROR at setup of test_register_user _____________________
file C:\Users\narayan\Develop\foxhole\tests\test_main.py, line 12
  async def test_register_user(
      async_client: AsyncClient, db_session: AsyncSession
  ) -> None:
      response = await async_client.post(
          "/auth/register", json={"screen_name": "testuser"}
      )
      assert response.status_code == 200
      # Add more assertions as needed
E       fixture 'async_client' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, authenticated_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, client, configure_logging, db_session, doctest_namespace, engine, event_loop, mock_storage_service, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, test_client, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, websocket_manager
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\narayan\Develop\foxhole\tests\test_main.py:12
________________________ ERROR at setup of test_login _________________________
file C:\Users\narayan\Develop\foxhole\tests\test_main.py, line 22
  async def test_login(async_client: AsyncClient, db_session: AsyncSession) -> None:
      # First, register a user
      register_response = await async_client.post(
          "/auth/register", json={"screen_name": "testuser"}
      )
      assert register_response.status_code == 200
      user_id = register_response.json()["id"]

      # Now, try to login
      login_response = await async_client.post("/auth/token", data={"user_id": user_id})
      assert login_response.status_code == 200
      assert "access_token" in login_response.json()
E       fixture 'async_client' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, authenticated_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, client, configure_logging, db_session, doctest_namespace, engine, event_loop, mock_storage_service, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, test_client, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, websocket_manager
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\narayan\Develop\foxhole\tests\test_main.py:22
___________________ ERROR at setup of test_get_user_profile ___________________
file C:\Users\narayan\Develop\foxhole\tests\test_main.py, line 36
  async def test_get_user_profile(
      async_client: AsyncClient, db_session: AsyncSession
  ) -> None:
      # First, register and login
      register_response = await async_client.post(
          "/auth/register", json={"screen_name": "testuser"}
      )
      user_id = register_response.json()["id"]
      login_response = await async_client.post("/auth/token", data={"user_id": user_id})
      access_token = login_response.json()["access_token"]

      # Now, get the user profile
      response = await async_client.get(
          "/auth/users/me", headers={"Authorization": f"Bearer {access_token}"}
      )
      assert response.status_code == 200
      assert response.json()["id"] == user_id
E       fixture 'async_client' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, authenticated_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, client, configure_logging, db_session, doctest_namespace, engine, event_loop, mock_storage_service, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, test_client, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, websocket_manager
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\narayan\Develop\foxhole\tests\test_main.py:36
_________________ ERROR at setup of test_update_user_profile __________________
file C:\Users\narayan\Develop\foxhole\tests\test_main.py, line 55
  async def test_update_user_profile(
      async_client: AsyncClient, db_session: AsyncSession
  ) -> None:
      # First, register and login
      register_response = await async_client.post(
          "/auth/register", json={"screen_name": "testuser"}
      )
      user_id = register_response.json()["id"]
      login_response = await async_client.post("/auth/token", data={"user_id": user_id})
      access_token = login_response.json()["access_token"]

      # Now, update the user profile
      update_response = await async_client.put(
          "/auth/users/me",
          headers={"Authorization": f"Bearer {access_token}"},
          json={"screen_name": "updated_testuser"},
      )
      assert update_response.status_code == 200
      assert update_response.json()["screen_name"] == "updated_testuser"
E       fixture 'async_client' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, authenticated_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, client, configure_logging, db_session, doctest_namespace, engine, event_loop, mock_storage_service, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, test_client, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, websocket_manager
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\narayan\Develop\foxhole\tests\test_main.py:55
_____________________ ERROR at setup of test_health_check _____________________
file C:\Users\narayan\Develop\foxhole\tests\test_main.py, line 76
  async def test_health_check(async_client: AsyncClient) -> None:
      response = await async_client.get("/health")
      assert response.status_code == 200
      assert response.json() == {"status": "ok"}
E       fixture 'async_client' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, authenticated_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, client, configure_logging, db_session, doctest_namespace, engine, event_loop, mock_storage_service, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, test_client, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, websocket_manager
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\narayan\Develop\foxhole\tests\test_main.py:76
============================== warnings summary ===============================
.venv\Lib\site-packages\pydantic\_internal\_config.py:267
.venv\Lib\site-packages\pydantic\_internal\_config.py:267
  c:\Users\narayan\Develop\foxhole\.venv\Lib\site-packages\pydantic\_internal\_config.py:267: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.4/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

tests/test_auth.py::test_create_access_token
  tests\test_auth.py:109: PytestWarning: The test <Function test_create_access_token> is marked with '@pytest.mark.asyncio' but it is not an async function. Please remove asyncio marker. If the test is not marked explicitly, check for global markers applied via 'pytestmark'.
    def test_create_access_token() -> None:

tests/test_websocket.py::test_websocket_connection
tests/test_websocket.py::test_websocket_multiple_messages
tests/test_websocket.py::test_websocket_endpoint_uninitialized_manager
tests/test_websocket.py::test_websocket_endpoint_sqlalchemy_error
tests/test_websocket.py::test_websocket_disconnect
  c:\Users\narayan\Develop\foxhole\.venv\Lib\site-packages\jose\jwt.py:311: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    now = timegm(datetime.utcnow().utctimetuple())

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR tests/test_auth.py::test_register_user
ERROR tests/test_auth.py::test_login
ERROR tests/test_auth.py::test_get_current_user
ERROR tests/test_auth.py::test_update_user_profile
ERROR tests/test_auth.py::test_invalid_token
ERROR tests/test_auth.py::test_missing_token
ERROR tests/test_auth.py::test_login_for_access_token_invalid_user
ERROR tests/test_auth.py::test_get_current_user_invalid_token
ERROR tests/test_auth.py::test_update_user_profile_no_changes
ERROR tests/test_files.py::test_upload_file
ERROR tests/test_files.py::test_get_file_url
ERROR tests/test_files.py::test_get_file_url_not_found
ERROR tests/test_files.py::test_list_files
ERROR tests/test_health.py::test_health_check
ERROR tests/test_main.py::test_register_user
ERROR tests/test_main.py::test_login
ERROR tests/test_main.py::test_get_user_profile
ERROR tests/test_main.py::test_update_user_profile
ERROR tests/test_main.py::test_health_check
============ 13 passed, 1 skipped, 8 warnings, 19 errors in 0.29s =============
